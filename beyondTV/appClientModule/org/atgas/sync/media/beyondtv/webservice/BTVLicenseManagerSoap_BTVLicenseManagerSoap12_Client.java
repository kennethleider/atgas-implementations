
package com.snapstream.webservice;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2011-05-05T12:54:49.739-06:00
 * Generated source version: 2.4.0
 * 
 */
public final class BTVLicenseManagerSoap_BTVLicenseManagerSoap12_Client {

    private static final QName SERVICE_NAME = new QName("http://www.snapstream.com/WebService", "BTVLicenseManager");

    private BTVLicenseManagerSoap_BTVLicenseManagerSoap12_Client() {
    }

    public static void main(String args[]) throws Exception {
        URL wsdlURL = BTVLicenseManager.WSDL_LOCATION;
        if (args.length > 0) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        BTVLicenseManager ss = new BTVLicenseManager(wsdlURL, SERVICE_NAME);
        BTVLicenseManagerSoap port = ss.getBTVLicenseManagerSoap12();  
        
        {
        System.out.println("Invoking acceptAuthenticateRequest...");
        byte[] _acceptAuthenticateRequest_clientToken = new byte[0];
        byte[] _acceptAuthenticateRequest__return = port.acceptAuthenticateRequest(_acceptAuthenticateRequest_clientToken);
        System.out.println("acceptAuthenticateRequest.result=" + _acceptAuthenticateRequest__return);


        }
        {
        System.out.println("Invoking logonWindowsAuth...");
        java.lang.String _logonWindowsAuth_networkLicense = "";
        byte[] _logonWindowsAuth_clientToken = new byte[0];
        com.snapstream.types.PVSPropertyBag _logonWindowsAuth__return = port.logonWindowsAuth(_logonWindowsAuth_networkLicense, _logonWindowsAuth_clientToken);
        System.out.println("logonWindowsAuth.result=" + _logonWindowsAuth__return);


        }
        {
        System.out.println("Invoking getPermissionsForTicket...");
        java.lang.String _getPermissionsForTicket_authTicket = "";
        java.lang.String _getPermissionsForTicket__return = port.getPermissionsForTicket(_getPermissionsForTicket_authTicket);
        System.out.println("getPermissionsForTicket.result=" + _getPermissionsForTicket__return);


        }
        {
        System.out.println("Invoking logonRemote...");
        java.lang.String _logonRemote_networkLicense = "";
        java.lang.String _logonRemote_username = "";
        java.lang.String _logonRemote_password = "";
        com.snapstream.types.PVSPropertyBag _logonRemote__return = port.logonRemote(_logonRemote_networkLicense, _logonRemote_username, _logonRemote_password);
        System.out.println("logonRemote.result=" + _logonRemote__return);


        }
        {
        System.out.println("Invoking logoff...");
        java.lang.String _logoff_ticket = "";
        port.logoff(_logoff_ticket);


        }
        {
        System.out.println("Invoking principalServerName...");
        java.lang.String _principalServerName__return = port.principalServerName();
        System.out.println("principalServerName.result=" + _principalServerName__return);


        }
        {
        System.out.println("Invoking acceptClientResponse...");
        byte[] _acceptClientResponse_oldClientToken = new byte[0];
        byte[] _acceptClientResponse_clientToken = new byte[0];
        byte[] _acceptClientResponse__return = port.acceptClientResponse(_acceptClientResponse_oldClientToken, _acceptClientResponse_clientToken);
        System.out.println("acceptClientResponse.result=" + _acceptClientResponse__return);


        }
        {
        System.out.println("Invoking changePassword...");
        java.lang.String _changePassword_authTicket = "";
        java.lang.String _changePassword_oldPassword = "";
        java.lang.String _changePassword_newPassword = "";
        boolean _changePassword__return = port.changePassword(_changePassword_authTicket, _changePassword_oldPassword, _changePassword_newPassword);
        System.out.println("changePassword.result=" + _changePassword__return);


        }
        {
        System.out.println("Invoking logon...");
        java.lang.String _logon_networkLicense = "";
        java.lang.String _logon_username = "";
        java.lang.String _logon_password = "";
        com.snapstream.types.PVSPropertyBag _logon__return = port.logon(_logon_networkLicense, _logon_username, _logon_password);
        System.out.println("logon.result=" + _logon__return);


        }
        {
        System.out.println("Invoking getVersionNumber...");
        java.lang.String _getVersionNumber__return = port.getVersionNumber();
        System.out.println("getVersionNumber.result=" + _getVersionNumber__return);


        }
        {
        System.out.println("Invoking cleanupLogin...");
        byte[] _cleanupLogin_clientToken = new byte[0];
        port.cleanupLogin(_cleanupLogin_clientToken);


        }
        {
        System.out.println("Invoking renewLogonSession...");
        java.lang.String _renewLogonSession_authTicket = "";
        boolean _renewLogonSession__return = port.renewLogonSession(_renewLogonSession_authTicket);
        System.out.println("renewLogonSession.result=" + _renewLogonSession__return);


        }
        {
        System.out.println("Invoking logLinkInfo...");
        java.lang.String _logLinkInfo_macAddress = "";
        java.lang.String _logLinkInfo_authticket = "";
        port.logLinkInfo(_logLinkInfo_macAddress, _logLinkInfo_authticket);


        }
        {
        System.out.println("Invoking canChangePassword...");
        java.lang.String _canChangePassword_authTicket = "";
        boolean _canChangePassword__return = port.canChangePassword(_canChangePassword_authTicket);
        System.out.println("canChangePassword.result=" + _canChangePassword__return);


        }

        System.exit(0);
    }

}
